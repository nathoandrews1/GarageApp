/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package garageapp;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import javax.swing.JOptionPane;


/**
 *
 * @author Nathan
 * I have commented the code in sections for marks. But If there's code the same or similar I won't
 * comment it. Just to keep the density of text down on the screen, whereas if it was a workplace I'm aware I should also 
 * comment it all. I hope that is sufficient for the marks!
 */
public class GarageGUI extends javax.swing.JFrame {
        private ArrayList <Car> garageFile;
        private String result;
    /**
     * Creates new form GarageGUI
     */
    public GarageGUI() {
        initComponents();
        //Create an instance of the ArrayList of Objects.
        garageFile = new ArrayList<>();
        //Hide the results until we need need the then we can setVisible(true);
        resultTF.hide();
        //When Instanced load the document so the user doesn't have to. If it doesn't exist it will run a Create() method instead.
         Load();
    }    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        brandLbl = new javax.swing.JLabel();
        modelLbl = new javax.swing.JLabel();
        colorLbl = new javax.swing.JLabel();
        brandTF = new javax.swing.JTextField();
        colorTF = new javax.swing.JTextField();
        modelTF = new javax.swing.JTextField();
        addBtn = new javax.swing.JButton();
        searchBtn = new javax.swing.JButton();
        displayBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        loadBtn = new javax.swing.JButton();
        clearBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultTF = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        saveBtn = new javax.swing.JButton();
        highlightSearchBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        helpBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        brandLbl.setText("Brand:");

        modelLbl.setText("Model:");

        colorLbl.setText("Color:");

        brandTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                brandTFActionPerformed(evt);
            }
        });

        addBtn.setText("Add");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        searchBtn.setText("Search");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        displayBtn.setText("Display");
        displayBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayBtnActionPerformed(evt);
            }
        });

        deleteBtn.setText("Delete");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        loadBtn.setText("Load");
        loadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadBtnActionPerformed(evt);
            }
        });

        clearBtn.setText("Clear All");
        clearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBtnActionPerformed(evt);
            }
        });

        resultTF.setColumns(20);
        resultTF.setRows(5);
        jScrollPane1.setViewportView(resultTF);

        jLabel1.setText("When searching or deleting.  Please use 1 value at a time.");

        saveBtn.setText("Save");
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });

        highlightSearchBtn.setText("Delete Record from Results");
        highlightSearchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                highlightSearchBtnActionPerformed(evt);
            }
        });

        jLabel2.setText("Highlight ALL of a SINGLE record to delete it from the records.");

        helpBtn.setText("Help");
        helpBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(colorLbl)
                                    .addGap(18, 18, 18)
                                    .addComponent(colorTF))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(modelLbl)
                                    .addGap(18, 18, 18)
                                    .addComponent(modelTF))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(brandLbl)
                                    .addGap(18, 18, 18)
                                    .addComponent(brandTF, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(addBtn)
                                .addGap(18, 18, 18)
                                .addComponent(searchBtn)
                                .addGap(18, 18, 18)
                                .addComponent(deleteBtn)
                                .addGap(18, 18, 18)
                                .addComponent(displayBtn))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(highlightSearchBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(helpBtn))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 21, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addComponent(saveBtn)
                .addGap(31, 31, 31)
                .addComponent(loadBtn)
                .addGap(18, 18, 18)
                .addComponent(clearBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(brandLbl)
                            .addComponent(brandTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(modelLbl)
                            .addComponent(modelTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(colorLbl)
                            .addComponent(colorTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addBtn)
                            .addComponent(searchBtn)
                            .addComponent(displayBtn)
                            .addComponent(deleteBtn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(clearBtn)
                                .addComponent(loadBtn))
                            .addComponent(saveBtn)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(highlightSearchBtn)
                            .addComponent(helpBtn))
                        .addGap(8, 8, 8)
                        .addComponent(jLabel2)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void brandTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_brandTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_brandTFActionPerformed

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        // TODO add your handling code here:
        //Create an isntance of the Car Class. 
        //I have used the overloaded constructor. There is also a default constructor. This was to keep the code neater.
        Car c1 = new Car(brandTF.getText(), modelTF.getText(),colorTF.getText());
        garageFile.add(c1);
        brandTF.setText("");
        modelTF.setText("");
        colorTF.setText("");
        //Save the file so the user doesn't have to keep pressing buttons.
        Save("Succesfully added to the file, Saved Automatically.");
        //JOptionPane.showMessageDialog(null, "Succesfully added to the file, Saved Automatically.");
    }//GEN-LAST:event_addBtnActionPerformed

    //Select highligthed and delete function.
    public void deleteHighText() {
        //This is a variable that grabs the users highlighted/selected text from the results area.
        String selectedString = resultTF.getSelectedText();
        //Creating variables for the split 
        String brand,model,color;
        //Splitting the users selection where there are spaces.
        String split[] = selectedString.split(" ");
        //The result is an Array, now we assign our values to our earlier declared variables.
        brand  = split[0];
        model = split[1];
        color = split[2];
        //Same loop we have used many times before for searching/deleting
        for(Car c : garageFile)
        {
            if(brand.equalsIgnoreCase(c.getBrand()) && model.equalsIgnoreCase(c.getModel()) && color.equalsIgnoreCase(c.getColor()))
            {
                int trigger = JOptionPane.showConfirmDialog(null,"Are you sure you want to delete "+ c.getBrand() + " " + c.getModel() + " " + c.getColor());
                if(trigger == 0)
                {
                    garageFile.remove(c);
                    Save();
                }
                else
                    break;
            }
        }
    }
    
    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        // TODO add your handling code here
            //Reset Text field before displaying results. 
            resultTF.setText("");
            //For every Car c object in garageFile
             //Find where brand is == to brandTF
            int trigger = 0;
            //Loop the garageFIle for every object it contains.
            for(Car c : garageFile)
            {
                if(brandTF.getText().equalsIgnoreCase(c.getBrand()))
                {
                    //If found set visible and print cars. I used resultTF.setText( resultTF.getText());  This was to act like +=
                    resultTF.setVisible(true);
                    trigger=1;
                    resultTF.setText(resultTF.getText() + "Found car/cars  with that brand " + c.getBrand() + " " + c.getModel() + " " + c.getColor() + "\n");
                }
                else if(modelTF.getText().equalsIgnoreCase(c.getModel()))
                {
                    //If found set visible and print cars. I used resultTF.setText( resultTF.getText());  This was to act like +=
                    resultTF.setVisible(true);
                    trigger=1;
                    resultTF.setText(resultTF.getText() + "Found car/cars  with that model " + c.getModel() + " " + c.getBrand() + " " + c.getColor() + "\n");
                }
                else if(colorTF.getText().equalsIgnoreCase(c.getColor()))
                {
                    //If found set visible and print cars. I used resultTF.setText( resultTF.getText());  This was to act like +=
                    resultTF.setVisible(true);
                    trigger=1;
                    resultTF.setText(resultTF.getText() + "Found car/cars  with that color " + c.getModel() + " " + c.getBrand() + " " + c.getColor() + "\n");
                }
                else if(trigger != 1) {
                    JOptionPane.showMessageDialog(null,"Nothing Found");
                    trigger=1;
                }
            }
        
    }//GEN-LAST:event_searchBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        // TODO add your handling code here;
            resultTF.setText("");
            //If the search is empty ask the user to write in a field.
            //We can use trim() to trim spaces to reduce errors, then check with the isEmpty() method
            if(brandTF.getText().trim().isEmpty() && colorTF.getText().trim().isEmpty() && modelTF.getText().trim().isEmpty())
                JOptionPane.showMessageDialog(null, "Please write in a search box to search and delete");
            
            for(Car c : garageFile) 
            {
                if(brandTF.getText().equalsIgnoreCase(c.getBrand()))
                {
                    resultTF.setVisible(true);
                    JOptionPane.showMessageDialog(null,"Found cars  with that brand " + c.getBrand() + " " + c.getModel() + " " + c.getColor() + "\n");
                    int  trigger = JOptionPane.showConfirmDialog(null, "Would you like to delete this entry?");
                    //Apply trigger to confirm selection 0 = true/yes
                    if(trigger==0)
                    {
                        garageFile.remove(c);
                        Save();
                        trigger = 5;
                    }
                    // 2 = cancel on confirm dialog.
                    else if (trigger==2)
                    {
                        break;
                    }
                }
                 else  if(modelTF.getText().equalsIgnoreCase(c.getModel()))
                {
                    resultTF.setVisible(true);
                    JOptionPane.showMessageDialog(null,"Found cars  with that Model " + c.getModel() + " " + c.getBrand() + " " + c.getColor() + "\n");
                    int trigger = JOptionPane.showConfirmDialog(null, "Would you like to delete this entry?");
                    System.out.print(trigger);
                    if(trigger==0)
                    {
                        garageFile.remove(c);
                        Save();
                        trigger = 5;
                    }
                    else if (trigger==2){
                        break;
                    }
                }
                else  if(colorTF.getText().equalsIgnoreCase(c.getColor()))
                {
                    resultTF.setVisible(true);
                    JOptionPane.showMessageDialog(null,"Found cars  with that Color " + c.getModel() + " " + c.getBrand() + " " + c.getColor() + "\n");
                    int  trigger = JOptionPane.showConfirmDialog(null, "Would you like to delete this entry?");
                    System.out.print(trigger);
                    if(trigger==0)
                    {
                        garageFile.remove(c);
                        Save();
                        trigger = 5;
                    }
                    else if (trigger==2){
                        break;
                    }
                }
            }
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void displayBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayBtnActionPerformed
        // TODO add your handling code here:
        resultTF.setVisible(true);
        resultTF.setText("");
        //For every Car c object inside garageFile set the result text field with the output data. Same set and get methods to copy +=
        if(garageFile != null)
        for(Car c:garageFile)
        {
            resultTF.setText(resultTF.getText() + c.getBrand() + " " + c.getModel() + " " + c.getColor() +"\n");
        }
        else{
            JOptionPane.showMessageDialog(null,"File Empty");
        }
    }//GEN-LAST:event_displayBtnActionPerformed

        private void displayResults() {                                           
        // TODO add your handling code here:
        resultTF.setVisible(true);
        resultTF.setText("");
        //For every Car c object inside garageFile set the result text field with the output data. Same set and get methods to copy +=
        if(garageFile != null)
        for(Car c:garageFile)
        {
            resultTF.setText(resultTF.getText() + c.getBrand() + " " + c.getModel() + " " + c.getColor() +"\n");
        }
        else{
            JOptionPane.showMessageDialog(null,"File Empty");
        }
    }   
    //Custom Save function to save the file when needed after certain actions.
        private void Save() {                                        
        // TODO add your handling code here:
        try{
            File f = new File("output.dat");
            FileOutputStream fStream = new FileOutputStream(f);
            ObjectOutputStream oStream =  new ObjectOutputStream(fStream);
            
            oStream.writeObject(garageFile);
            oStream.close();
            JOptionPane.showMessageDialog(null, "Successfully saved the file.");
        }
        catch(IOException e)
        {
            JOptionPane.showMessageDialog(null,"Error saving file \n"+e);
        }
    }
        
        //Overloaded/Polymorphism Method of Save just to overwrite the JOptionPane message for the add button.
        private void Save(String x) {                                        
        // TODO add your handling code here:
        try{
            File f = new File("output.dat");
            FileOutputStream fStream = new FileOutputStream(f);
            ObjectOutputStream oStream =  new ObjectOutputStream(fStream);
            
            oStream.writeObject(garageFile);
            oStream.close();
            JOptionPane.showMessageDialog(null, x);
        }
        catch(IOException e)
        {
            JOptionPane.showMessageDialog(null,"Error saving file \n"+e);
        }
    }
        
        //Create Function used on Load startup when class is instanced.
               private void Create() {                                        
        // TODO add your handling code here:
        try{
            //Using Output Stream as we are outputting content to the file.
            //Create the variable and set location to file.
            File f = new File("output.dat");
            //Access FileOutputStream to get access to the interface for writing to files.
            FileOutputStream fStream = new FileOutputStream(f);
            //Access ObjectOutput as we are using an object to write with. So we need farther interfaces.
            ObjectOutputStream oStream =  new ObjectOutputStream(fStream);
            
            //Writing to the file
            oStream.writeObject(garageFile);
            //Closing the file. This is important for saving the information, can also cause errors in code elsewhere if not closed.
            oStream.close();
            JOptionPane.showMessageDialog(null, "Successfully Created the File!.");
        }
        catch(IOException e)
        {
            JOptionPane.showMessageDialog(null,"Error Creating file \n"+e);
        }
    }      
        
            private void Load() {                                        
        // TODO add your handling code here:
        try{
            File f = new File("output.dat");
            FileInputStream fStream = new FileInputStream(f);
            ObjectInputStream oStream = new ObjectInputStream(fStream);
            
            //TypeCast the object Car as an ArrayList OBJECT so that it can be output to the ObjectInputStream.readObject();
            //This was demonstrated in class and TypeCast can be thought of as a parse and I personally have found a major help!
            //if running into a conversion error, if in doubt cast it out ! (int)(String)(double)
            garageFile =(ArrayList<Car>)oStream.readObject();
            oStream.close();
            JOptionPane.showMessageDialog(null, "Succesfully loaded the file");
        }
        catch(ClassNotFoundException |IOException e)
        {
            JOptionPane.showMessageDialog(null,"Error Loading file. Creating it instead. :D");
            Create();
        }
    } 
    
    private void loadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadBtnActionPerformed
        // TODO add your handling code here:
        
        //Loading...
        //Usual loading create and instance file,
        //Use input stream as we are inputting data to the program.
        try{
            File f = new File("output.dat");
            FileInputStream fStream = new FileInputStream(f);
            ObjectInputStream oStream = new ObjectInputStream(fStream);
            
            garageFile =(ArrayList<Car>)oStream.readObject();
            oStream.close();
            JOptionPane.showMessageDialog(null, "Succesfully loaded the file");
        }
        catch(ClassNotFoundException |IOException e)
        {
            JOptionPane.showMessageDialog(null,"Error Loading file " + e);
        }
    }//GEN-LAST:event_loadBtnActionPerformed

    private void clearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBtnActionPerformed
        // TODO add your handling code here:
        brandTF.setText("");
        modelTF.setText("");
        colorTF.setText("");
    }//GEN-LAST:event_clearBtnActionPerformed

    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
        // TODO add your handling code here:
        Save();
    }//GEN-LAST:event_saveBtnActionPerformed

    //Just call the function as we had already written in ahead of making this button
    private void highlightSearchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_highlightSearchBtnActionPerformed
        // TODO add your handling code here:
        deleteHighText();
    }//GEN-LAST:event_highlightSearchBtnActionPerformed

    private void helpBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpBtnActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(null,"So, click and drag from the right and select all of the record. Then click the button delete record.\n Very the same if you want to try and copy the text");
    }//GEN-LAST:event_helpBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GarageGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GarageGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GarageGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GarageGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GarageGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JLabel brandLbl;
    private javax.swing.JTextField brandTF;
    private javax.swing.JButton clearBtn;
    private javax.swing.JLabel colorLbl;
    private javax.swing.JTextField colorTF;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JButton displayBtn;
    private javax.swing.JButton helpBtn;
    private javax.swing.JButton highlightSearchBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton loadBtn;
    private javax.swing.JLabel modelLbl;
    private javax.swing.JTextField modelTF;
    private javax.swing.JTextArea resultTF;
    private javax.swing.JButton saveBtn;
    private javax.swing.JButton searchBtn;
    // End of variables declaration//GEN-END:variables
}
